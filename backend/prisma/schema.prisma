generator client {
  provider = "cargo prisma"
  output   = "../src/db/prisma.rs"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:1@localhost:3306/abode_testing"
}

model User {
  id            String         @id @default(uuid())
  role          Role           @default(USER)
  username      String         @unique
  password      String
  posts         Post[]
  pendingPosts  PendingPost[]
  notifications Notification[]
}

enum Role {
  USER
  ADMIN
}

model Post {
  id          String   @id @default(uuid())
  submittedAt DateTime @default(now())
  confirmedAt DateTime @default(now())
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  category    Category
  excerpt     String
  citation    String
  images      Image[]
}

model PendingPost {
  id          String         @id @default(uuid())
  submittedAt DateTime       @default(now())
  author      User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  category    Category
  excerpt     String
  citation    String
  images      PendingImage[]
}

enum Category {
  ISLAMISM
  MODERNITY
  SECULARISM
  FEMINISM
}

model Image {
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  path   String @id
  width  Int
  height Int
}

model PendingImage {
  post   PendingPost @relation(fields: [postId], references: [id])
  postId String
  path   String      @id
  width  Int
  height Int
}

/// * Notif ID
/// * Timestamp
/// * recipientID
/// * read (bool)
/// * notificationType
/// * content - String, serialize to enum
model Notification {
  id          String           @id @default(uuid())
  createdAt   DateTime         @default(now())
  recipient   User             @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String
  read        Boolean          @default(false)
  nType       NotificationType
  content     String
}

enum NotificationType {
  APPROVAL
  REJECTION
}
